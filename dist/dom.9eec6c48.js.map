{"version":3,"sources":["dom.js"],"names":["window","dom","Create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSiblings","before","node1","append","parent","child","appendChild","wrap","remove","removeChild","empty","childNodes","x","arr","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nextSibling","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.9eec6c48.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    Create(string) {\r\n        container = document.createElement('template');\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    after(node, node2) {\r\n        return node.parentNode.insertBefore(node2, node.nextSiblings)\r\n    },\r\n    before(node, node1) {\r\n        return node.parentNode.insertBefore(node1, node)\r\n    },\r\n    append(parent, child) {\r\n        return parent.appendChild(child)\r\n    },\r\n    wrap(node, parent) {\r\n        dom.before(node, parent)\r\n        dom.append(parent, node)\r\n    },\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    },\r\n    empty(node) {\r\n        const { childNodes } = node\r\n        const arr = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            arr.push(dom.remove(x))\r\n            x = node.firstChild\r\n        }\r\n        return arr\r\n    },\r\n    attr(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    text(node, string) {\r\n        if (arguments.length = 2) {\r\n            if ('innerText in node') {\r\n                node.innerText = string\r\n            } else {\r\n                node.textContent = string\r\n            }\r\n\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText in node') {\r\n                return node.innerText\r\n            } else {\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === \"string\") {\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    },\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children).filter(n => n !== node)\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodeList, fn) {\r\n        for (i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        let list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n}\r\n"]}